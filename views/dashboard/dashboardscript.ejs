<script>
  $(document).ready(function () {
    LoadList()
    Loadtable()
    let myChart
    let categorylist = []

    $('#dateRange').daterangepicker({
      opens: 'right',
      startDate: moment().startOf('month'),
      endDate: moment(),
      maxDate: moment(),
      ranges: {
        'This Week': [moment().startOf('week'), moment().endOf('week')],
        'Last Week': [
          moment().subtract(1, 'week').startOf('week'),
          moment().subtract(1, 'week').endOf('week'),
        ],
        'This Month': [moment().startOf('month'), moment().endOf('month')],
        'Last Month': [
          moment().subtract(1, 'month').startOf('month'),
          moment().subtract(1, 'month').endOf('month'),
        ],
        'Last 2 Month': [
          moment().subtract(2, 'month').startOf('month'),
          moment().subtract(1, 'month').endOf('month'),
        ],
        'Last 3 Month': [
          moment().subtract(3, 'month').startOf('month'),
          moment().subtract(1, 'month').endOf('month'),
        ],
      },
      alwaysShowCalendars: true,
      showCustomRangeLabel: false,
      buttonClasses: ['btn btn-outline-inventory'],
      locale: {
        format: 'MMM D, YYYY',
      },
    })

    $('#adjustDateBackward').on('click', function () {
      var startDate = $('#dateRange').data('daterangepicker').startDate
      var endDate = $('#dateRange').data('daterangepicker').endDate.clone().subtract(7, 'days')
      $('#dateRange').data('daterangepicker').setEndDate(endDate)
      $('#dateRange').data('daterangepicker').setStartDate(startDate.clone().subtract(7, 'days'))
    })

    $('#adjustDateForward').on('click', function () {
      var startDate = $('#dateRange').data('daterangepicker').startDate
      var endDate = $('#dateRange').data('daterangepicker').endDate.clone().add(7, 'days')
      $('#dateRange').data('daterangepicker').setStartDate(startDate.clone().add(7, 'days'))
      $('#dateRange').data('daterangepicker').setEndDate(endDate)
    })

    let initialdate = $('#dateRange').val()
    getsoldcount(initialdate)

    $(document).on('change', '#categoryid', function () {
      let category = $(this).val()
      console.log(category)
      let dateRange = $('#dateRange').val()

      if (myChart) {
        myChart.destroy()
      }
      // console.log(category)
      getData(dateRange, category)
    })

    $(document).on('change', '#dateRange', function () {
      let dateRange = $(this).val()
      let category = $('#categoryid').val()
      getsoldcount(dateRange)
      if (myChart) {
        myChart.destroy()
      }
      // console.log(dateRange)
      if (category != '') {
        getData(dateRange, category)
      } else {
        warning('Select Category', 'No Category Selected!')
      }
    })

    $('#search').on('input', function () {
      TableSearch('#datatable2', 4, '#search')
    })

    function LoadList() {
      $.ajax({
        type: 'GET',
        url: '/category/load',
        success: function (result) {
          let container = result.data

          categorylist = container.map((item) => item.name)
          let index = Math.floor(Math.random() * categorylist.length)
          let randomCategory = categorylist[index]
          if (myChart) {
            myChart.destroy()
          }
          getData(initialdate, randomCategory)

          $.each(container, (key, item) => {
            let categoryname = item.name
            let categoryid = item.id

            var listItem = $('<li></li>').text(categoryname).data('categoryid', categoryname)

            $('.categorylist').append(listItem)
          })

          $('.categorylist').on('click', 'li', function () {
            var selectedOption = $(this).text()
            var selectedcategoryId = $(this).data('categoryid')

            $('#selectedcategory').text(selectedOption)
            $('#categoryid').val(selectedcategoryId).change()
          })
        },
        error: function (err) {
          errormsg(err)
        },
      })
    }

    function getData(daterange, category) {
      let startDate = moment(daterange.split(' - ')[0], 'MMM D, YYYY')
      let endDate = moment(daterange.split(' - ')[1], 'MMM D, YYYY')

      let formattedStartDate = startDate.format('MM/DD/YYYY')
      let formattedEndDate = endDate.format('MM/DD/YYYY')

      let formattedDate = formattedStartDate + ' - ' + formattedEndDate
      // console.log(formattedDate)
      // console.log("Paylaod: ", daterange, category)
      $.ajax({
        url: '/sold/getsold',
        method: 'POST',
        dataType: 'json',
        data: {
          daterange: formattedDate,
          category: category,
        },
        success: function (data) {
          if (data.msg === 'success') {
            console.log('Graph Sold Data: ', data.data)
            if (data.data.length != 0) {
              let filteredData = data.data.filter(function (item) {
                let itemDate = moment(item.date, 'YYYY-MM-DD')
                return itemDate.isSameOrAfter(startDate) && itemDate.isSameOrBefore(endDate)
              })

              let producByDateTable = {}

              filteredData.forEach(function (item) {
                let date = item.date
                let productName = item.productname
                let quantity = 1
                let totalPrice = item.price

                producByDateTable[date] = producByDateTable[date] || {}
                producByDateTable[date][productName] = producByDateTable[date][productName] || {
                  quantity: 0,
                  totalPrice: 0,
                }
                producByDateTable[date][productName].quantity += quantity
                producByDateTable[date][productName].totalPrice += totalPrice
              })

              let tableHtml =
                '<thead class="table-header header-style" style="background-color: white;"><tr>' +
                '<th class="text-center">Date</th>' +
                '<th class="text-center">Product Name</th>' +
                '<th class="text-center">Quantity</th>' +
                '<th class="text-center">Total Price</th>' +
                '</tr></thead><tbody>'

              Object.keys(producByDateTable).forEach(function (date) {
                Object.keys(producByDateTable[date]).forEach(function (productName) {
                  let quantity = producByDateTable[date][productName].quantity
                  let totalPrice = producByDateTable[date][productName].totalPrice

                  tableHtml +=
                    '<tr>' +
                    '<td class="text-center">' +
                    date +
                    '</td>' +
                    '<td class="text-center">' +
                    productName +
                    '</td>' +
                    '<td class="text-center">' +
                    quantity +
                    '</td>' +
                    '<td class="text-center">' +
                    formatCurrency(totalPrice) +
                    '</td>' +
                    '</tr>'
                })
              })

              tableHtml += '</tbody>'

              $('#datatable').empty().html(tableHtml)

              let productByDate = {}

              let allProducts = getAllProducts(data.data)
              let allDates = getAllDatesInRange(startDate, endDate)
              console.log('Included Products:', allProducts, 'All Dates:', allDates)

              allDates.forEach(function (date) {
                productByDate[date] = {}
                allProducts.forEach(function (product) {
                  productByDate[date][product] = 0
                })
              })
              console.log('product by date 1:', productByDate)

              data.data.forEach(function (item) {
                let date = item.date
                let productName = item.productname
                let productprice = item.price

                productByDate[date] = productByDate[date] || {}
                productByDate[date][productName] = (productByDate[date][productName] || 0) + 1
              })

              const dates = Object.keys(productByDate)
              // console.log("data: ", productByDate);

              const chartData = {
                labels: dates,
                datasets: allProducts.map((product) => ({
                  label: product,
                  data: dates.map((date) => productByDate[date][product] || 0),
                  backgroundColor: 'rgb(216, 42, 39, 0.65)',
                  borderColor: 'rgb(216, 42, 39, 0.65)',
                  borderWidth: 2,
                  fill: false,
                  lineTension: 0.4,
                })),
              }

              // Create the chart
              const ctx = document.getElementById('myChart').getContext('2d')
              const config = {
                type: 'line',
                data: chartData,
                options: {
                  maintainAspectRatio: false,
                  scales: {
                    x: {
                      barPercentage: 0.5,
                      grid: {
                        display: false,
                      },
                    },
                    y: {
                      ticks: {
                        callback: function (value, index, values) {
                          return `${value.toLocaleString(undefined, { maximumFractionDigits: 0 })}`
                        },
                      },
                    },
                  },
                  animation: {
                    duration: 1000,
                    easing: 'easeInOutQuad',
                  },
                  plugins: {
                    legend: {
                      labels: {
                        font: {
                          family: 'Share Tech',
                          size: 14, // Set the font size here
                        },
                      },
                    },
                  },
                },
              }

              myChart = new Chart(ctx, config)
              $('#noDataMessage').hide()
            } else {
              $('#noDataMessage').show()
              $('#datatable').empty()
            }
          } else {
            console.error(data.msg)
          }
        },
        error: function (error) {
          console.error(error)
        },
      })
    }

    function getAllDatesInRange(startDate, endDate) {
      var dates = []
      var currentDate = moment(startDate)
      var end = moment(endDate)

      while (currentDate.isSameOrBefore(end)) {
        dates.push(currentDate.format('YYYY-MM-DD'))
        currentDate.add(1, 'days')
      }

      return dates
    }

    function getAllProducts(data) {
      var products = new Set()
      data.forEach(function (item) {
        products.add(item.productname)
      })
      return Array.from(products)
    }

    function getAllDates(data) {
      var dates = new Set()
      data.forEach(function (item) {
        dates.add(item.date)
      })
      return Array.from(dates)
    }

    $.ajax({
      type: 'GET',
      url: '/product/getstocks',
      success: function (result) {
        let container = result.data
        $('#totalstocks').text(container.length)
        // console.log("stocks: ", container);

        let groupedData = groupDataByItemName(container)

        displayDataInTable(groupedData)

        // generatePDF();

        createChart(container)
      },
      error: function (err) {
        errormsg(err)
      },
    })
    // const mockData = {
    //     item1: { category: 'Category1', stocks: 10, totalPrice: 100 },
    //     item2: { category: 'Category2', stocks: 20, totalPrice: 200 },
    // };

    // displayDataInTable(mockData);

    function groupDataByItemName(data) {
      const groupedData = {}
      data.forEach((item) => {
        const itemName = item.itemname
        groupedData[itemName] = groupedData[itemName] || {
          category: item.category,
          stocks: 0,
          totalPrice: 0,
        }
        groupedData[itemName].stocks += 1
        groupedData[itemName].totalPrice += item.price
      })
      // console.log("sample", groupedData)

      return groupedData
    }

    function displayDataInTable(groupedData) {
      var tableHtml =
        '<thead class="table-header header-style"><tr>' +
        '<th class="text-center">Item Name</th>' +
        '<th class="text-center">Category</th>' +
        '<th class="text-center">Stocks</th>' +
        '<th class="text-center">Total Price</th>' +
        '</tr></thead><tbody class="no-border">'

      Object.keys(groupedData).forEach((itemName) => {
        const { category, stocks, totalPrice } = groupedData[itemName]
        tableHtml +=
          '<tr>' +
          '<td class="text-center">' +
          itemName +
          '</td>' +
          '<td class="text-center">' +
          category +
          '</td>' +
          '<td class="text-center">' +
          stocks +
          '</td>' +
          '<td class="text-center">' +
          formatCurrency(totalPrice) +
          '</td>' +
          '</tr>'
      })

      tableHtml += '</tbody>'

      $('#datatable2').empty().html(tableHtml)
    }

    function createChart(data) {
      let allCategories = [...new Set(data.map((item) => item.category.toUpperCase()))]

      let stocks = []

      allCategories.forEach((category) => {
        let count = data.filter((item) => item.category.toUpperCase() === category).length
        stocks.push({ category, count })
      })

      let labels = stocks.map((entry) => entry.category)
      let chartData = stocks.map((entry) => entry.count)

      let ctx = document.getElementById('myChart1').getContext('2d')
      let myChart = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: labels,
          datasets: [
            {
              label: 'Stock Counts',
              data: chartData,
              backgroundColor: 'rgb(216, 42, 39, 0.65)',
              borderColor: 'rgb(216, 42, 39',
              borderWidth: 1,
            },
          ],
        },
        options: {
          maintainAspectRatio: false,
          plugins: {
            labels: {
              font: {
                family: 'Share Tech',
                size: 14,
              },
            },
          },
        },
      })
    }

    function Loadtable() {
      $.ajax({
        url: '/index/deployed',
        method: 'GET',
        dataType: 'json',
        success: function (data) {
          if (data.msg === 'success') {
            populatedeploytable(data.data)
          } else {
            console.error(data.msg)
          }
        },
        error: function (error) {
          console.error(error)
        },
      })

      $.ajax({
        url: '/index/sold',
        method: 'POST',
        dataType: 'json',
        success: function (data) {
          if (data.msg === 'success') {
            populatesoldtable(data.data)
          } else {
            console.error(data.msg)
          }
        },
        error: function (error) {
          console.error(error)
        },
      })
    }

    function populatedeploytable(data) {
      //  //console.log(error);
      const tableBody = $('#deploytable tbody')
      tableBody.empty()

      if (data.length === 0) {
        const tr = $('<tr>').append(
          $('<td>', {
            colspan: 3,
            class: 'text-center',
            text: 'No Data',
          })
        )
        tableBody.append(tr)
      } else {
        data.forEach((item) => {
          const tr = $('<tr>').append(
            $('<td>', {
              text: item.assetcontrol,
              'data-label': 'ID',
              class: 'custom-mobile-align cbi-link',
            }),
            $('<td>', { text: item.date, 'data-label': 'Item', class: 'custom-mobile-align' }),
            $('<td>', {
              text: item.referenceno,
              'data-label': 'Category',
              class: 'custom-mobile-align',
            })
          )

          tableBody.append(tr)
        })
      }
    }

    function populatesoldtable(data) {
      //  //console.log(error);
      const tableBody = $('#soldtable tbody')
      tableBody.empty()

      if (data.length === 0) {
        const tr = $('<tr>').append(
          $('<td>', {
            colspan: 3,
            class: 'text-center',
            text: 'No Data',
          })
        )
        tableBody.append(tr)
      } else {
        data.forEach((item) => {
          const tr = $('<tr>').append(
            $('<td>', {
              text: item.assetcontrol,
              'data-label': 'ID',
              class: 'custom-mobile-align cbi-link',
            }),
            $('<td>', { text: item.date, 'data-label': 'Item', class: 'custom-mobile-align ' }),
            $('<td>', {
              text: item.referenceno,
              'data-label': 'Category',
              class: 'custom-mobile-align ',
            })
          )

          tableBody.append(tr)
        })
      }
    }

    function getsoldcount(date) {
      let startDate = moment(date.split(' - ')[0], 'MMM D, YYYY')
      let endDate = moment(date.split(' - ')[1], 'MMM D, YYYY')
      let formattedStartDate = startDate.format('MM/DD/YYYY')
      let formattedEndDate = endDate.format('MM/DD/YYYY')
      let formattedDate = formattedStartDate + ' - ' + formattedEndDate

      $.ajax({
        url: '/index/getsoldcount',
        method: 'POST',
        dataType: 'json',
        data: {
          daterange: formattedDate,
        },
        success: function (data) {
          if (data.msg === 'success') {
            let container = data.data
            // console.log("Sold Data: ", container)
            let totalprice = 0
            // console.log("sold total: ", container.length)
            container.forEach((item) => {
              // console.log("Price: ", item.price)
              totalprice += item.price
            })
            $('#totalsold').text(formatCurrency(totalprice))
            $('#date').text(' (' + date + ')')
          } else {
            console.error(data.msg)
          }
        },
        error: function (error) {
          console.error(error)
        },
      })
    }

    $('#convertopdfdb').on('click', function () {
      $.ajax({
        type: 'GET',
        url: '/product/getstocks',
        success: function (result) {
          let container = result.data
          $('#totalstocks').text(container.length)
          // console.log("stocks: ", container);

          let groupedData = groupDataByItemName(container)
          // console.log("sample data", groupedData);
          let template = 'STOCKS REPORT'
          // console.log("Current Stock: ", groupedData);
          if (groupedData.length != 0) {
            $.ajax({
              type: 'POST',
              url: '/index/processpdfdata',
              data: {
                processeddata: groupedData,
                template: template,
              },
              success: function (result) {
                window.open(`/index/generatepdf`, '_blank')
                success('Success', 'PDF generate successfully!')
              },
              error: function (err) {
                errormsg(err)
              },
            })
          }
        },
        error: function (err) {
          errormsg(err)
        },
      })
    })

    $(document).on('click', '#convertoexceldb', function () {
      const table = document.getElementById('datatable2')
      const ws = XLSX.utils.table_to_sheet(table)
      const wb = XLSX.utils.book_new()
      XLSX.utils.book_append_sheet(wb, ws, 'Sheet1')
      var currentDate = new Date()

      var monthNames = [
        'January',
        'February',
        'March',
        'April',
        'May',
        'June',
        'July',
        'August',
        'September',
        'October',
        'November',
        'December',
      ]

      var month = currentDate.getMonth()
      var day = currentDate.getDate()
      var year = currentDate.getFullYear()

      var formattedDate = monthNames[month] + ' ' + day + ', ' + year

      XLSX.writeFile(wb, `Product Stocks ${formattedDate}.xlsx`)
    })
  })
</script>
