<script>
  $(document).ready(function () {
    //Functionality
    let isFetchingData = false
    let hasMoreData = true
    let currentPage = 1
    let categoryContainer = ''
    let itemContainer = ''

    var activePositions = []
    let assetcontrol = ''
    let status = ''

    const loader = `  
        <tr class="loading-row">
          <td><div class="custom-loader"></div></td>
          <td><div class="custom-loader"></div></td>
          <td><div class="custom-loader"></div></td>
          <td><div class="custom-loader"></div></td>
          <td><div class="custom-loader"></div></td>
          <td><div class="custom-loader"></div></td>
          <td><div class="custom-loader"></div></td>
          <td><div class="custom-loader"></div></td>
          <td><div class="custom-loader"></div></td>
        </tr>`

    const tbody = $('#datatable tbody')
    for (let i = 0; i < 7; i++) {
      tbody.append(loader)
    }

    LoadTable()

    $('#data-table tbody').on('click', 'tr', function () {
      var dataRow = []
      $(this)
        .closest('tr')
        .find('td')
        .each(function () {
          dataRow.push($(this).text())
        })
      //console.log(dataRow);
      assetcontrol = dataRow[0]
      status = dataRow[7]
    })

    let activeItems = []
    function test(selector, newValue) {
      const inputElement = $(selector)
      const currentValue = inputElement.val()
      inputElement.val(newValue)

      // Log the change if the value is different
      if (currentValue !== newValue) {
        console.log(`Value changed: ${currentValue} => ${newValue}`)
      }
    }

    $(document).on('input', '#category', function () {
      $('#hiddenvalue').val('')
      categoryContainer = ''
    })

    $(document).on('input', '#item', function () {
      $('#hiddenvalue2').val('')
      itemContainer = ''
    })

    $(document).on('click', '#itemDropdown .dropdown-option', function () {
      itemContainer = $('#hiddenValue2').val()
      // console.log("product: ", itemContainer)
    })

    $(document).on('click', '#categoryDropdown .dropdown-option', function () {
      categoryContainer = $('#hiddenValue').val()
      // console.log("category: ", categoryContainer)

      activeItems.length = 0
      $('#itemDropdown .dropdown-option').remove()
      $('#item').val('')
      itemContainer = ''

      $.ajax({
        type: 'POST',
        url: '/items/getitemsbycategory',
        data: {
          id: categoryContainer,
        },
        success: function (result) {
          let container = result.data
          //console.log(container);
          $.each(container, (key, item) => {
            let displayname = item.name
            let id = item.id
            activeItems.push({ display: displayname, value: item.id })
          })
          populateCustomDropdown2()

          function populateCustomDropdown2() {
            for (const item of activeItems) {
              addOption2('itemDropdown', item.display, item.value)
            }
          }

          function addOption2(dropdownId, displayText, actualValue) {
            const dropdownElement = document.getElementById(dropdownId)
            const hiddenInput = document.getElementById('hiddenValue2')

            const newOption = document.createElement('div')
            newOption.className = 'dropdown-option'
            newOption.textContent = displayText
            newOption.setAttribute('data-value', actualValue)

            newOption.addEventListener('click', function () {
              const inputElement = document.getElementById('item')
              inputElement.value = displayText
              hiddenInput.value = actualValue
              dropdownElement.style.display = 'none'
            })

            dropdownElement.appendChild(newOption)
          }

          setupCustomDropdown('item', 'itemDropdown', 'dropdown-option')
        },
        error: function (err) {
          errormsg(err)
        },
      })
    })

    $(document).on('click', '#addBtn', function () {
      let serial = $('#serial').val()
      let categoryname = $('#category').val()
      let itemname = $('#item').val()
      let podate = $('#podate').val()
      let ponumber = $('#ponumber').val()
      let warrantydate = $('#warrantydate').val()

      var message = ''
      if (serial == '') {
        message += 'Serial, '
      }
      if (itemContainer == '') {
        message += 'Item does not Exist ' + `${itemname}, `
      }
      if (categoryContainer == '') {
        message += 'Category does not Exist ' + `${categoryname}, `
      }
      if (podate == '') {
        message += 'PO Date, '
      }
      if (ponumber == '') {
        message += 'PO Number, '
      }
      if (warrantydate == '') {
        message += 'Warranty Date, '
      }

      if (message != '') {
        warning('Required', `Please fill up ${message}`)
      } else {
        // console.log(serial, itemContainer, categoryContainer, podate, ponumber, warrantydate);
        $.ajax({
          type: 'POST',
          url: '/product/save',
          data: {
            serial: serial,
            itemname: itemContainer,
            category: categoryContainer,
            podate: podate,
            ponumber: ponumber,
            warrantydate: warrantydate,
          },
          success: function (result) {
            ////console.log(result);
            if (result.msg == 'success') {
              resettable()
              success('Saved', 'Successfully')
              $('#serial').val('')
              $('#podate').val('')
              $('#ponumber').val('')
              $('#warrantydate').val('')
              $('#item').val('')
              $('#category').val('')
              $('#itemDropdown .dropdown-option').remove()
              itemContainer = ''
              categoryContainer = ''
            }

            if (result.msg == 'exist') {
              warning('Exist', `${serial} already exist!`)
            }
          },
          error: function (err) {
            errormsg(err)
          },
        })
      }
    })

    //#region LOAD TABLE

    function populatetable(data) {
      // //console.log(error);
      const tableBody = $('#datatable tbody')

      if (data.length === 0) {
        const tr = $('<tr>').append(
          $('<td>', {
            colspan: 8,
            class: 'text-center',
            text: 'No Data Matched',
          })
        )
        tableBody.append(tr)
      } else {
        data.forEach((item) => {
          let action = ''
          if (item.status === 'ACTIVE') {
            action = `<span class="editbutton" id="inactiveBtn"><i class="fas fa-eye-slash" style="color: #45edf2;"></i></span>`
          } else if (item.status === 'INACTIVE') {
            action = `<span class="editbutton" id="activeBtn"><i class="fas fa-eye" style="color: #45edf2;"></i></span>`
          }

          const tr = $('<tr>').append(
            $('<td>', {
              text: item.assetcontrol,
              'data-label': 'Asset Control',
              class: 'custom-mobile-align',
            }),
            $('<td>', {
              text: item.serial,
              'data-label': 'Serial',
              class: 'custom-mobile-align no-wrap',
            }),
            $('<td>', {
              text: item.itemname,
              'data-label': 'Item Name',
              class: 'custom-mobile-align no-wrap',
            }),
            $('<td>', {
              text: item.category,
              'data-label': 'Category',
              class: 'custom-mobile-align no-wrap',
            }),
            $('<td>', {
              text: item.podate,
              'data-label': 'PO Date',
              class: 'custom-mobile-align',
            }),
            $('<td>', {
              text: item.ponumber,
              'data-label': 'PO Number',
              class: 'custom-mobile-align',
            }),
            $('<td>', {
              text: item.warrantydate,
              'data-label': 'Warranty Date',
              class: 'custom-mobile-align',
            }),
            $('<td>', {
              text: item.status,
              'data-label': 'Status',
              class: 'custom-mobile-align',
            }),
            $('<td>', {
              html: action,
              'data-label': 'Action',
              class: '',
            })
          )

          tableBody.append(tr)
        })
      }
    }

    function LoadTable() {
      if (!hasMoreData) {
        return
      }
      $('.progress').hide()
      $('.progress').slideDown()
      $.ajax({
        url: '/product/loadproduct',
        method: 'GET',
        dataType: 'json',
        data: { page: currentPage },
        xhrFields: {
          onprogress: function (e) {
            if (e.lengthComputable) {
              var percentComplete = (e.loaded / e.total) * 100
              $('.progress-bar').css('width', percentComplete + '%')
            }
          },
        },
        success: function (data) {
          setTimeout(function () {
            $('.progress').slideUp(function () {
              hasMoreData = data.data.length > 0
              if (!hasMoreData) {
                const tableBody = $('#datatable tbody')
                const tr = $('<tr>').append(
                  $('<td>', {
                    colspan: 9,
                    class: 'text-center',
                    text: 'No More Data',
                  })
                )
                tableBody.append(tr)
              } else {
                if (data.msg === 'success') {
                  var loadingstate = document.querySelectorAll('.loading-row')
                  loadingstate.forEach(function (row) {
                    row.remove()
                  })
                  populatetable(data.data)
                  currentPage++
                } else {
                  console.error(data.msg)
                }
              }
              isFetchingData = false
            })
          }, 1000)
        },
        error: function (error) {
          console.error(error)
          isFetchingData = false
          hasMoreData = false
        },
      })
    }

    $('.scrollable-table-container').scroll(function () {
      const container = $(this)
      if (isFetchingData) {
        return
      }
      if (container.scrollTop() + container.innerHeight() >= container[0].scrollHeight - 10) {
        //console.log("Append Triggered!");
        isFetchingData = true
        LoadTable()
      }
    })

    function resettable() {
      const tableBody = $('#datatable tbody')
      tableBody.empty()
      currentPage = 1
      hasMoreData = true
      LoadTable()
    }

    //#endregion LOAD TABLE

    $(document).on('click', '#activeBtn', function () {
      //console.log(assetcontrol);
      //console.log(status);
      $.ajax({
        type: 'POST',
        url: '/product/status',
        data: {
          status: status,
          assetcontrol: assetcontrol,
        },
        success: function (result) {
          if (result.msg == 'success') {
            resettable()
            success('Saved', 'Successfully')
          }

          if (result.msg == 'notexist') {
            warning(`${assetcontrol} does not exist!`)
          }
        },
        error: function (err) {
          errormsg(err)
        },
      })
    })

    $(document).on('click', '#inactiveBtn', function () {
      //console.log(assetcontrol);
      //console.log(status);
      $.ajax({
        type: 'POST',
        url: '/product/status',
        data: {
          status: status,
          assetcontrol: assetcontrol,
        },
        success: function (result) {
          if (result.msg == 'success') {
            resettable()
            success('Saved', 'Successfully')
          }

          if (result.msg == 'notexist') {
            warning(`${assetcontrol} does not exist!`)
          }
        },
        error: function (err) {
          errormsg(err)
        },
      })
    })

    let activeCategory = []

    function LoadList() {
      $.ajax({
        type: 'GET',
        url: '/category/load',
        success: function (result) {
          let container = result.data
          $.each(container, (key, item) => {
            let displayname = item.name
            let id = item.id
            // console.log(displayname);

            activeCategory.push({
              display: displayname,
              value: id,
            })
          })
          // console.log(activeCategory)
          populateCustomDropdown1()
        },
        error: function (err) {
          errormsg(err)
        },
      })
    }

    function populateCustomDropdown1() {
      for (const category of activeCategory) {
        addOption1('categoryDropdown', category.display, category.value)
      }
    }

    function addOption1(dropdownId, displayText, actualValue) {
      const dropdownElement = document.getElementById(dropdownId)
      const hiddenInput = document.getElementById('hiddenValue')

      const newOption = document.createElement('div')
      newOption.className = 'dropdown-option'
      newOption.textContent = displayText
      newOption.setAttribute('data-value', actualValue)

      newOption.addEventListener('click', function () {
        const inputElement = document.getElementById('category')
        inputElement.value = displayText
        hiddenInput.value = actualValue
        dropdownElement.style.display = 'none'
      })

      dropdownElement.appendChild(newOption)
    }

    function setupCustomDropdown(inputId, dropdownId, optionClass) {
      const inputElement = document.getElementById(inputId)
      const dropdownElement = document.getElementById(dropdownId)
      const options = dropdownElement.getElementsByClassName(optionClass)

      inputElement.addEventListener('click', function () {
        dropdownElement.style.display = 'block'
      })

      for (const option of options) {
        option.addEventListener('click', function () {
          inputElement.value = option.textContent
          const actualValue = option.getAttribute('data-value')
          inputElement.setAttribute('data-actual-value', actualValue)
          dropdownElement.style.display = 'none'
        })
      }

      inputElement.addEventListener('input', function () {
        const value = inputElement.value.toUpperCase()
        for (const option of options) {
          if (option.textContent.toUpperCase().includes(value)) {
            option.style.display = 'block'
          } else {
            option.style.display = 'none'
          }
        }
        dropdownElement.style.display = 'block'
      })

      document.addEventListener('click', function (event) {
        const target = event.target
        if (!dropdownElement.contains(target) && target !== inputElement) {
          dropdownElement.style.display = 'none'
        }
      })
    }

    setupCustomDropdown('category', 'categoryDropdown', 'dropdown-option')
    LoadList()

    let searchTimeout

    function filterTableRows() {
      const keyword = $('#search').val().trim().toLowerCase()

      clearTimeout(searchTimeout)

      searchTimeout = setTimeout(function () {
        if (keyword != '') {
          $.ajax({
            type: 'POST',
            url: '/product/search',
            data: {
              keyword: keyword,
            },
            success: function (result) {
              console.log(result.data)
              let data = result.data
              const tableBody = $('#datatable tbody')
              tableBody.empty()

              if (data.length === 0) {
                tableBody.empty()
                const tr = $('<tr>').append(
                  $('<td>', {
                    colspan: 8,
                    class: 'text-center',
                    text: 'No Data Matched',
                  })
                )
                tableBody.append(tr)
              } else {
                data.forEach((item) => {
                  let action = ''
                  if (item.status === 'ACTIVE') {
                    action = `<span class="editbutton" id="inactiveBtn"><i class="fas fa-eye-slash" style="color: #45edf2;"></i></span>`
                  } else if (item.status === 'INACTIVE') {
                    action = `<span class="editbutton" id="activeBtn"><i class="fas fa-eye" style="color: #45edf2;"></i></span>`
                  }

                  const tr = $('<tr>').append(
                    $('<td>', {
                      text: item.assetcontrol,
                      'data-label': 'Asset Control',
                      class: 'custom-mobile-align',
                    }),
                    $('<td>', {
                      text: item.serial,
                      'data-label': 'Serial',
                      class: 'custom-mobile-align no-wrap',
                    }),
                    $('<td>', {
                      text: item.itemname,
                      'data-label': 'Item Name',
                      class: 'custom-mobile-align no-wrap',
                    }),
                    $('<td>', {
                      text: item.category,
                      'data-label': 'Category',
                      class: 'custom-mobile-align no-wrap',
                    }),
                    $('<td>', {
                      text: item.podate,
                      'data-label': 'PO Date',
                      class: 'custom-mobile-align',
                    }),
                    $('<td>', {
                      text: item.ponumber,
                      'data-label': 'PO Number',
                      class: 'custom-mobile-align',
                    }),
                    $('<td>', {
                      text: item.warrantydate,
                      'data-label': 'Warranty Date',
                      class: 'custom-mobile-align',
                    }),
                    $('<td>', {
                      text: item.status,
                      'data-label': 'Status',
                      class: 'custom-mobile-align',
                    }),
                    $('<td>', {
                      html: action,
                      'data-label': 'Action',
                      class: '',
                    })
                  )

                  tableBody.append(tr)
                })
              }
            },
            error: function (err) {
              errormsg(err)
            },
          })
        } else {
          resettable()
        }
      }, 1500)
    }

    $('#search').on('input', filterTableRows)

    //#region Upload
    $(document).on('click', '#uploadButton', function () {
      let uploaddata = $('#fileinput').val()
      if (uploaddata != '') {
        Loading('Uploading, Please wait for a moment...')
        UploadProcess()
      } else {
        warning('Warning!', 'No File Chosen!')
      }
    })

    function UploadProcess() {
      //Reference the FileUpload element.
      var fileUpload = document.getElementById('fileinput')

      //Validate whether File is valid Excel file.
      var regex = /^([a-zA-Z0-9\s_\\.\-:])+(.xls|.xlsx|.csv|.ods)$/
      if (regex.test(fileUpload.value.toLowerCase())) {
        if (typeof FileReader != 'undefined') {
          var reader = new FileReader()

          //For Browsers other than IE.
          if (reader.readAsBinaryString) {
            reader.onload = function (e) {
              GetTableFromExcel(e.target.result)
            }
            reader.readAsBinaryString(fileUpload.files[0])
          } else {
            //For IE Browser.
            reader.onload = function (e) {
              var data = ''
              var bytes = new Uint8Array(e.target.result)
              for (var i = 0; i < bytes.byteLength; i++) {
                data += String.fromCharCode(bytes[i])
              }
              GetTableFromExcel(data)
            }
            reader.readAsArrayBuffer(fileUpload.files[0])
          }
        } else {
          warning('Upload', 'This browser does not support HTML5.')
        }
      } else {
        warning('Upload', 'Please upload a valid Excel file.')
      }
    }

    function GetTableFromExcel(data) {
      //Read the Excel File data in binary
      var workbook = XLSX.read(data, {
        type: 'binary',
      })

      //get the name of First Sheet.
      var Sheet = workbook.SheetNames[0]

      //Read all rows from First Sheet into an JSON array.
      var excelRows = XLSX.utils.sheet_to_row_object_array(workbook.Sheets[Sheet])
      var columns = Object.keys(excelRows[0])

      //Create a HTML Table element.
      var myTable = document.createElement('table')
      myTable.border = '1'

      //Add the header row.
      var row = myTable.insertRow(-1)

      var dataExcelArr = []
      //Add the data rows from Excel file.
      for (var i = 0; i < excelRows.length; i++) {
        //Add the data row.
        var data = []
        var row = myTable.insertRow(-1)
        for (var j = 0; j < columns.length; j++) {
          var cell = row.insertCell(-1)
          cell.innerHTML = excelRows[i][columns[j]]
          data.push({
            item: excelRows[i][columns[j]],
          })
        }
        dataExcelArr.push({
          category: data[0].item,
          itemname: data[1].item,
          serial: data[2].item,
          podate: data[3].item,
          ponumber: data[4].item,
          deliverydate: data[5].item,
          trackingnumber: data[6].item,
          warrantydate: data[7].item,
        })
      }
      excelDataSave(dataExcelArr)
    }

    function excelDataSave(data) {
      var dataraw = JSON.stringify(data, null, 2)
      $.ajax({
        type: 'POST',
        url: '/product/upload',
        data: {
          data: dataraw,
        },
        success: function (result) {
          hideLoading()
          if (result.msg != 'success') {
            warningRegister(
              'Duplicate',
              `Some data are invalid or already exist in the database <br><button class="btn btn-sm btn-primary" id="txtBtn">Download</button>`
            )

            $(document).on('click', '#txtBtn', function () {
              downloadTxtFile(result.data, 'existing_invalid_data.txt')
            })
          } else {
            success('Saved!', 'Data saved!')
            resettable()
            // swal({
            //   title: "Success",
            //   text: "Data saved!",
            //   icon: "success",
            //   button: "OK!",
            // });
          }

          // $('#item-tbl').DataTable().ajax.reload();
        },
        error: function (result) {
          console.error(result)
        },
      })
    }

    function downloadTxtFile(data, filename) {
      data = data.toString().replace(/,/g, '\n')

      const blob = new Blob([data], { type: 'text/plain' })

      const url = URL.createObjectURL(blob)

      const link = document.createElement('a')
      link.href = url
      link.download = filename

      document.body.appendChild(link)

      link.click()

      URL.revokeObjectURL(url)
      document.body.removeChild(link)
    }
    //#endregion
  })
</script>
